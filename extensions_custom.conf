[toCustomOut]
exten => _X.,1,Set(CALLERID(num)=+447436477442)
same => n,Monitor(wav,${EXTEN}-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${UNIQUEID},mb)
same => n,Dial(SIP/siptraffic/${EXTEN})
same => n,Hangup()
;exten => h,1,DumpChan()

[toAGI]
exten => _X.,1,NoOp(${CHANNEL(ruri)})
exten => _X.,2,AGI(dialer.php,${CHANNEL(ruri)})

exten => _+X.,1,NoOp(${CHANNEL(ruri)})
exten => _+X.,2,AGI(dialer.php,${CHANNEL(ruri)})

;exten => 923111991664,1,Set(CALLERID(num)=00442324442123)
;exten => 923111991664,2,Dial(SIP/upwork/923111991664)
;exten => 923228456014,1,Set(CALLERID(num)=00442324442123)
;exten => 923228456014,2,Dial(SIP/upwork/923228456014)
;exten => 923214401407,1,Set(CALLERID(num)=00442324442123)
;exten => 923214401407,2,Dial(SIP/upwork/923214401407)
;exten => customer,1,Dial(SIP/customer)
;exten => 12064248192,1,Dial(SIP/customer)

[autoDialer]
;exten => _X.,1,NoOp(Outbound Call ${CALLERID(name)}, ${caller}, ${SIP_HEADER(From)})
;same => n,Set(CALLERID(num)=${caller})
;same => n,Dial(SIP/${gateway}/${EXTEN},60,tT)
exten => autoDialerCall,1,NoOp(Starting Auto Dialer)
 same => n,AMD()                             ; Run Answering Machine Detection
 same => n,NoOp(AMD Status: ${AMDSTATUS})    ; Log AMD result
 same => n,NoOp(AMD Cause: ${AMDCAUSE})      ; Log detailed cause

 ; Route based on AMD result
 same => n,GotoIf($["${AMDSTATUS}" = "MACHINE"]?voicemail_detected)
 same => n,GotoIf($["${AMDSTATUS}" = "HUMAN"]?human_detected)

 same => n(human_detected),NoOp(Human Answered)
 same => n,AGI(auto-dialer.php,${spool},${dialer})  ; Execute AGI script for humans
 same => n,Hangup()

 same => n(voicemail_detected),NoOp(Voicemail Detected)
 same => n,Hangup()

[toOut]
;exten => _X.,1,NoOp(Outbound Call ${CALLERID(name)}, ${SIP_HEADER(From)})
;same => n,Set(CALLERID(num)=${CALLERID(name)})
;same => n,Dial(SIP/voxbeam/${EXTEN},60,tT)
exten => _X.,1,NoOp(Outbound Call from ${CALLER_ID} to ${DEST_NUMBER} through Gateway ${GATEWAY})
same => n,Set(CALLERID(num)=${CALLER_ID})
same => n,Monitor(wav,${DEST_NUMBER}-${CALLER_ID}-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${UNIQUEID},b)
same => n,Dial(SIP/${GATEWAY}/${DEST_NUMBER})
same => n,Hangup()

exten => _+X.,1,NoOp(Outbound Call from ${CALLER_ID} to ${DEST_NUMBER} through Gateway ${GATEWAY})
same => n,Set(CALLERID(num)=${CALLER_ID})
same => n,Monitor(wav,${DEST_NUMBER}-${CALLER_ID}-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${UNIQUEID},b)
same => n,Dial(SIP/${GATEWAY}/${DEST_NUMBER})
same => n,Hangup()

exten => *1,1,NoOp(Holding Call)
exten => *1,n,SetMusicOnHold()
exten => *1,n,WaitExten(300)

[adminConference]
exten => adminConference,1,NoOp(ConfBridge to Admin Agent in Conference: ${CONFERENCE})
same => n,Set(CONFBRIDGE(user,type)=admin)
same => n,Set(CONFBRIDGE(user,admin)=yes)
same => n,Set(CONFBRIDGE(user,marked)=no)
same => n,Set(CONFBRIDGE(user,startmuted)=no)
same => n,Set(CONFBRIDGE(user,music_on_hold_when_empty)=yes)
same => n,Set(CONFBRIDGE(user,music_on_hold_class)=${MUSICCLASS})
same => n,Set(CONFBRIDGE(user,quiet)=no)
same => n,Set(CONFBRIDGE(user,announce_only_user)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count_all)=no)
same => n,Set(CONFBRIDGE(user,wait_marked)=no)
same => n,Set(CONFBRIDGE(user,end_marked)=yes)
same => n,Set(CONFBRIDGE(user,announce_join_leave)=no)
same => n,Set(CONFBRIDGE(user,dtmf_passthrough)=yes)
same => n,Set(CONFBRIDGE(user,dsp_drop_silence)=no)
same => n,Set(CONFBRIDGE(user,dsp_talking_threshold)=160)
same => n,Set(CONFBRIDGE(user,dsp_silence_threshold)=2500)
same => n,Set(CONFBRIDGE(user,talk_detection_events)=no)
same => n,Set(CONFBRIDGE(user,denoise)=no)
same => n,Set(CONFBRIDGE(user,jitterbuffer)=no)
same => n,ConfBridge(${CONFERENCE})

[customerConference]
exten => customerConference,1,NoOp(ConfBridge to Customer in Conference: ${CONFERENCE})
same => n,Set(CONFBRIDGE(user,type)=user)
same => n,Set(CONFBRIDGE(user,admin)=no)
same => n,Set(CONFBRIDGE(user,marked)=no)
same => n,Set(CONFBRIDGE(user,startmuted)=no)
same => n,Set(CONFBRIDGE(user,music_on_hold_when_empty)=yes)
same => n,Set(CONFBRIDGE(user,music_on_hold_class)=${MUSICCLASS})
same => n,Set(CONFBRIDGE(user,quiet)=no)
same => n,Set(CONFBRIDGE(user,announce_only_user)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count_all)=no)
same => n,Set(CONFBRIDGE(user,wait_marked)=no)
same => n,Set(CONFBRIDGE(user,end_marked)=yes)
same => n,Set(CONFBRIDGE(user,announce_join_leave)=no)
same => n,Set(CONFBRIDGE(user,dtmf_passthrough)=yes)
same => n,Set(CONFBRIDGE(user,dsp_drop_silence)=no)
same => n,Set(CONFBRIDGE(user,dsp_talking_threshold)=160)
same => n,Set(CONFBRIDGE(user,dsp_silence_threshold)=2500)
same => n,Set(CONFBRIDGE(user,talk_detection_events)=no)
same => n,Set(CONFBRIDGE(user,denoise)=no)
same => n,Set(CONFBRIDGE(user,jitterbuffer)=no)
same => n,ConfBridge(${CONFERENCE})

[branchConference]
exten => branchConference,1,NoOp(ConfBridge to Branch Agent in Conference: ${CONFERENCE})
same => n,Set(CONFBRIDGE(user,type)=user)
same => n,Set(CONFBRIDGE(user,admin)=no)
same => n,Set(CONFBRIDGE(user,marked)=no)
same => n,Set(CONFBRIDGE(user,startmuted)=no)
same => n,Set(CONFBRIDGE(user,music_on_hold_when_empty)=yes)
same => n,Set(CONFBRIDGE(user,music_on_hold_class)=${MUSICCLASS})
same => n,Set(CONFBRIDGE(user,quiet)=no)
same => n,Set(CONFBRIDGE(user,announce_only_user)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count_all)=no)
same => n,Set(CONFBRIDGE(user,wait_marked)=no)
same => n,Set(CONFBRIDGE(user,end_marked)=yes)
same => n,Set(CONFBRIDGE(user,announce_join_leave)=no)
same => n,Set(CONFBRIDGE(user,dtmf_passthrough)=no)
same => n,Set(CONFBRIDGE(user,dsp_drop_silence)=no)
same => n,Set(CONFBRIDGE(user,dsp_talking_threshold)=160)
same => n,Set(CONFBRIDGE(user,dsp_silence_threshold)=2500)
same => n,Set(CONFBRIDGE(user,talk_detection_events)=no)
same => n,Set(CONFBRIDGE(user,denoise)=no)
same => n,Set(CONFBRIDGE(user,jitterbuffer)=no)
same => n,ConfBridge(${CONFERENCE})

[ivrConference]
exten => ivrConference,1,NoOp(ConfBridge to Branch Agent in Conference: ${CONFERENCE})
same => n,Set(CONFBRIDGE(user,type)=user)
same => n,Set(CONFBRIDGE(user,admin)=yes)
same => n,Set(CONFBRIDGE(user,marked)=yes)
same => n,Set(CONFBRIDGE(user,startmuted)=no)
same => n,Set(CONFBRIDGE(user,music_on_hold_when_empty)=yes)
same => n,Set(CONFBRIDGE(user,music_on_hold_class)=${MUSICCLASS})
same => n,Set(CONFBRIDGE(user,quiet)=no)
same => n,Set(CONFBRIDGE(user,announce_only_user)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count_all)=no)
same => n,Set(CONFBRIDGE(user,wait_marked)=no)
same => n,Set(CONFBRIDGE(user,end_marked)=yes)
same => n,Set(CONFBRIDGE(user,announce_join_leave)=no)
same => n,Set(CONFBRIDGE(user,dtmf_passthrough)=no)
same => n,Set(CONFBRIDGE(user,dsp_drop_silence)=no)
same => n,Set(CONFBRIDGE(user,dsp_talking_threshold)=160)
same => n,Set(CONFBRIDGE(user,dsp_silence_threshold)=2500)
same => n,Set(CONFBRIDGE(user,talk_detection_events)=no)
same => n,Set(CONFBRIDGE(user,denoise)=no)
same => n,Set(CONFBRIDGE(user,jitterbuffer)=no)
same => n,ConfBridge(${CONFERENCE})

[customerConference-out]
exten => customerConference,1,NoOp(ConfBridge to Customer in Conference: ${CONFERENCE})
same => n,Set(CONFBRIDGE(user,type)=user)
same => n,Set(CONFBRIDGE(user,admin)=no)
same => n,Set(CONFBRIDGE(user,marked)=no)
same => n,Set(CONFBRIDGE(user,startmuted)=no)
same => n,Set(CONFBRIDGE(user,music_on_hold_when_empty)=no)
same => n,Set(CONFBRIDGE(user,music_on_hold_class)=${MUSICCLASS})
same => n,Set(CONFBRIDGE(user,quiet)=no)
same => n,Set(CONFBRIDGE(user,announce_only_user)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count_all)=no)
same => n,Set(CONFBRIDGE(user,wait_marked)=no)
same => n,Set(CONFBRIDGE(user,end_marked)=yes)
same => n,Set(CONFBRIDGE(user,announce_join_leave)=no)
same => n,Set(CONFBRIDGE(user,dtmf_passthrough)=yes)
same => n,Set(CONFBRIDGE(user,dsp_drop_silence)=no)
same => n,Set(CONFBRIDGE(user,dsp_talking_threshold)=160)
same => n,Set(CONFBRIDGE(user,dsp_silence_threshold)=2500)
same => n,Set(CONFBRIDGE(user,talk_detection_events)=no)
same => n,Set(CONFBRIDGE(user,denoise)=no)
same => n,Set(CONFBRIDGE(user,jitterbuffer)=no)
same => n,ConfBridge(${CONFERENCE})

[adminQueueConference]
exten => adminQueueConference,1,NoOp(ConfBridge to Admin Queue in Conference: ${CONFERENCE})
same => n,Set(CONFBRIDGE(user,type)=admin)
same => n,Set(CONFBRIDGE(user,admin)=yes)
same => n,Set(CONFBRIDGE(user,marked)=yes)
same => n,Set(CONFBRIDGE(user,startmuted)=no)
same => n,Set(CONFBRIDGE(user,music_on_hold_when_empty)=yes)
same => n,Set(CONFBRIDGE(user,music_on_hold_class)=${MUSICCLASS})
same => n,Set(CONFBRIDGE(user,quiet)=no)
same => n,Set(CONFBRIDGE(user,announce_only_user)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count)=no)
same => n,Set(CONFBRIDGE(user,announce_user_count_all)=no)
same => n,Set(CONFBRIDGE(user,wait_marked)=no)
same => n,Set(CONFBRIDGE(user,end_marked)=yes)
same => n,Set(CONFBRIDGE(user,announce_join_leave)=no)
same => n,Set(CONFBRIDGE(user,dtmf_passthrough)=yes)
same => n,Set(CONFBRIDGE(user,dsp_drop_silence)=no)
same => n,Set(CONFBRIDGE(user,dsp_talking_threshold)=160)
same => n,Set(CONFBRIDGE(user,dsp_silence_threshold)=2500)
same => n,Set(CONFBRIDGE(user,talk_detection_events)=no)
same => n,Set(CONFBRIDGE(user,denoise)=no)
same => n,Set(CONFBRIDGE(user,jitterbuffer)=no)
same => n,ConfBridge(${CONFERENCE})

[toQueue]
exten => adminQueue,1,NoOp(Queue: ${admin_queue})
same => n,Answer()
same => n,Queue(${admin_queue},t)

[holdCall]
exten => holdCall,1,NoOp(Holding Call ${MUSICCLASS} ${HOLDCHANNEL})
same => n,MusicOnHold(${MUSICCLASS})

[unholdCall]
exten => unholdCall,1,NoOp(Holding Call ${CONFERENCE})
same => n,ConfBridge(${CONFERENCE})

[transferholdCall]
exten => transferholdCall,1,NoOp(Holding Call ${MUSICCLASS} ${HOLDCHANNEL})
same => n,MusicOnHold(${MUSICCLASS})

[transferunholdCall]
exten => transferunholdCall,1,NoOp(Holding Call ${CONFERENCE})
same => n,ConfBridge(${CONFERENCE})


;-------------------------------------------------------------------------------
; Voice Dialer Conference Bridge Configuration
; Place this in /etc/asterisk/extensions_custom.conf or include in extensions.conf
;-------------------------------------------------------------------------------

[conference-bridge]
; Conference bridge extension for TTS voice dialer system
exten => _X.,1,NoOp(Conference Bridge for Voice Dialer - Room: ${EXTEN})
 same => n,Set(CONFBRIDGE(user,announce_join_leave)=yes)
 same => n,Set(CONFBRIDGE(user,announce_user_count)=yes)
 same => n,Set(CONFBRIDGE(user,music_on_hold_when_empty)=yes)
 same => n,Set(CONFBRIDGE(user,quiet)=no)
 same => n,Set(CONFBRIDGE(user,wait_marked)=no)
 
 ; Enter the conference
 same => n,ConfBridge(${EXTEN},default_bridge,default_user)
 same => n,Hangup()

[auto-tts-agent]
; Extension for automatic handling of agent side of TTS calls
exten => agent,1,NoOp(Auto TTS Agent)
 same => n,Answer()
 same => n,Wait(1)
 same => n,Playback(custom/agent-connected)
 same => n,Set(CHANNEL(hangup_handler_push)=agent-hangup,s,1)
 same => n,ConfBridge(${CONF_NUM},default_bridge,default_user)
 same => n,Hangup()

[agent-hangup]
; Hangup handler for agent channel
exten => s,1,NoOp(Agent ${CHANNEL} hung up)
 same => n,System(curl -s "http://localhost:8000/api/calls/${CALL_ID}/agent-hungup" -X POST)
 same => n,Return()

;-------------------------------------------------------------------------------
; Conference Bridge Configuration for confbridge.conf
;-------------------------------------------------------------------------------
; Add the following to your confbridge.conf file:
;
; [default_bridge]
; type=bridge
; max_members=10
; record_conference=no
; sound_join=beep
; sound_leave=beep
; 
; [default_user]
; type=user
; wait_marked=no
; music_on_hold_when_empty=yes
; announce_join_leave=yes
; announce_user_count=yes
; quiet=no

;-------------------------------------------------------------------------------
; Extension for Handling TTS Playback via AMI
;-------------------------------------------------------------------------------
; This extension is called via AMI to play TTS in a conference

[play-to-conference]
exten => playback,1,NoOp(${ANNOUCE_CHANNEL} ${AUDIO_PATH} ${CONF_NUM})
same => n,Answer()
same => n,ConfBridge(${CONF_NUM})
same => n,Playback(${AUDIO_PATH})
same => n,Hangup()
